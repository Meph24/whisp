import os
import re
import shutil
import sys

def get_platform():
    platforms = {
        'linux1' : 'Linux',
        'linux2' : 'Linux',
        'darwin' : 'OS X',
        'win32' : 'Windows'
    }
    if sys.platform not in platforms:
        return sys.platform
    
    return platforms[sys.platform]

def platformExecutableExtention():
    if get_platform() == "Windows":
      return ".exe"
    return ""

def platformSlash():
    if get_platform() == "Windows":
      return "\\"
    return "/"

def compiler():
    if get_platform() == "Windows":
      return "g++.exe"
    return "g++-9"


### program info
appname = "whisp"
debug_appname = appname + "_debug" + platformExecutableExtention()
release_appname = appname + platformExecutableExtention()


### directory variables ###
root = "."
source_root = 'src'
build_root = 'build'
test_root = 'test'


### Compiler ###
cxx = compiler()
cppdefines = {}
cppflags = ['-Wall','-Wpedantic']
cxxflags = ['-std=c++1z']


### Dependencies ###
lib = []
libpaths = []
gllib = ['GL', 'GLEW']
otherlibs = []
sfmllib = ['sfml-graphics', 'sfml-window', 'sfml-system', 'sfml-network', 'sfml-audio', 'pthread']
if get_platform() == "Windows":
    gllib  = ["opengl32", "glu32", "glew32"]
    otherlibs = ["stdc++fs"]
lib += gllib + sfmllib + otherlibs


### build environment specification ###
env = Environment()

#in Windows scons doesn't seem to be able to pick up PATH
if get_platform() == "Windows":
    env = Environment(ENV = {'PATH': os.environ['PATH'], 'TEMP':os.environ['TEMP']}, tools = ['gcc','g++','gnulink','ar'])
    env.Append(CPPPATH=['./deps/include'])
    libpaths += ['./deps/lib']



env.Replace(CXX = cxx)
env.Append(LIBS = lib)
env.Append(LIBPATH = libpaths)
env.Append(CPPDEFINES = cppdefines)
env.Append(CPPFLAGS = cppflags)
env.Append(CXXFLAGS = cxxflags)



#release configuration
release_env = env.Clone()
release_build_dir = build_root+"/release"
release_env.Append(CPPDEFINES=['BUILD_RELEASE'])
release_env.Append(CXXFLAGS=['-O3'])
#release_env.VariantDir(release_build_dir+'/main',source_root)
#release_env.VariantDir(release_build_dir+'/test',test_root)

#debug configuration
debug_env = env.Clone()
debug_build_dir = build_root+"/debug"
debug_env.Append(CPPDEFINES=['BUILD_DEBUG'])
debug_env.Append(CXXFLAGS=['-g3'])
#debug_env.VariantDir(debug_build_dir+'/main',source_root)
#debug_env.VariantDir(debug_build_dir+'/test',test_root)


### Source Collection ###
sourceDirectories = []
sourceFiles = []
headerFiles = []
for root, dirnames, filenames in os.walk(source_root):
 for dirname in dirnames:
  sourceDirectories  = sourceDirectories + [root+'/'+dirname]
  print('>>> additional source directory : ' + root + '/' + dirname + ' to the source directory list')
 for file in filenames:
  if file.endswith(('.c','.cpp')):
   sourceFiles.append(os.path.join(root,file).replace('\\', '/'))
  if file.endswith(('.h', '.hpp')):
   headerFiles.append(os.path.join(root, file).replace('\\', '/'))

if not sourceFiles:
 print("No Sources Found!")
elif len(sourceFiles) > 10:
 print('src> ' + str(len(sourceFiles)) + ' found!')
else:
 for f in sourceFiles:
  print('src> ' + f)

if not headerFiles:
 print('No Header files found !')
elif len(headerFiles) > 10:
 print('hdr> ' + str(len(headerFiles)) + ' found!')
else:
 for f in headerFiles:
  print('hdr> ' + f)


### Test Collection ###
testSources = []
for root, dirnames, filenames, in os.walk(test_root):
 for file in filenames:
  if os.path.basename(root) == 'test' and file.endswith(('.c','.cpp')):
   test_source = os.path.join(root,file)
   test_source = test_source.replace("\\", "/")
   testSources.append(test_source)

tests = {}
if not testSources:
 print('No Tests found!')
else:
 tests = { t.rsplit('/')[1].rsplit('.')[0] : t for t in testSources }
 testmessage = "TESTS <" + str(len(tests))
 if len(tests) < 11:
  testmessage += " " + str(list(tests.keys()))
 print(testmessage)

variantSourceDirectories=[x.replace(source_root,build_root) for x in sourceDirectories]
variantSourceFiles = [x.replace(source_root,build_root) for x in sourceFiles]


releaseobjects = []
for src in sourceFiles:
 releaseobjectname = src.replace(source_root, release_build_dir,1)
 releaseobjectname = releaseobjectname.replace('.cpp', '.o')
 releaseobjectname = releaseobjectname.replace('.c', '.o')
 releaseobjects = releaseobjects + [releaseobjectname]
 Alias("release_objects", release_env.Object(releaseobjectname, src))

debugobjects = []
for src in sourceFiles:
 debugobjectname = src.replace(source_root, debug_build_dir,1)
 debugobjectname = debugobjectname.replace('.cpp', '.o')
 debugobjectname = debugobjectname.replace('.c', '.o')
 debugobjects = debugobjects + [debugobjectname]
 Alias("debug_objects", debug_env.Object(debugobjectname, src))


### TESTING

debug_test_env = debug_env.Clone()
release_test_env = release_env.Clone()

release_test_env.Append(LIBS=['gtest','gtest_main', 'pthread'])
release_test_env.Append(CPPDEFINES=['BUILD_UNITTEST'])
debug_test_env.Append(LIBS=['gtest','gtest_main', 'pthread'])
debug_test_env.Append(CPPDEFINES=['BUILD_UNITTEST'])

if get_platform() == "Windows":
    release_test_env.Append(CPPPATH=['./test/area/include'])
    release_test_env.Append(LIBPATH=['./test/area/lib'])
    debug_test_env.Append(CPPPATH=['./test/area/include'])
    debug_test_env.Append(LIBPATH=['./test/area/lib'])


test_release_dir = release_build_dir+'/test'
test_release_bin_dir = 'bin/test'
test_debug_dir = debug_build_dir+'/test'
test_debug_bin_dir = 'bin/test/debug'

release_test_targets = []
for testname in tests:
 execname = testname + platformExecutableExtention()
 obj = test_release_dir + '/' + testname + '.o'
 execpath = test_release_bin_dir + '/'
 releasetestobjects = [x for x in releaseobjects if not x.endswith('main.o')] + [obj]
 release_test_env.Object(obj, tests[testname])
 target = release_test_env.Program(execpath + execname, releasetestobjects)
 if get_platform() == "Windows":
  release_test_env.AddPostAction(target,  Copy(test_root + '/area/' + execname, execpath+execname))
 release_test_targets.append(target)

debug_test_targets = []
for testname in tests:
 execname = testname + platformExecutableExtention()
 obj = test_debug_dir + '/' + testname + '.o'
 execpath = test_debug_bin_dir + '/'
 debugtestobjects = [x for x in debugobjects if not x.endswith('main.o')] + [obj]
 debug_test_env.Object(obj, tests[testname])
 target = debug_test_env.Program(execpath + execname, debugtestobjects)
 if get_platform() == "Windows":
  debug_test_env.AddPostAction(target,  Copy(test_root + '/area/debug_' + execname, execpath+execname))

 debug_test_targets.append(target)

release_target = release_env.Program('bin/' + release_appname, releaseobjects)
debug_target = debug_env.Program('bin/' + debug_appname, debugobjects)

release_env.AddPostAction(release_target, Delete('./' + release_appname))
release_env.AddPostAction(release_target, Copy('./' + release_appname, './bin/' + release_appname ))
debug_env.AddPostAction(debug_target, Delete('./'+ debug_appname ))
debug_env.AddPostAction(debug_target, Copy('./' + debug_appname, './bin/' +debug_appname))

Default( release_target + release_test_targets )
Alias("release", release_target)
Alias("debug", debug_target)
Alias("all", [ release_target, debug_target ] + debug_test_targets, release_test_targets )
Alias("test", release_test_targets)
Alias("release_test", release_test_targets)
Alias("debug_test", debug_test_targets)
Alias("dev", [debug_target] + debug_test_targets)

if get_platform() == "Windows":
 area_test_executables = [test_root + '/area/' + f for f in os.listdir(test_root + '/area/') if os.path.isfile(os.path.join(test_root + '/area/', f)) and f.endswith(platformExecutableExtention())]
 Clean( release_test_targets, area_test_executables )
Alias("clean", Clean('dirs', ['bin', 'build', 'install']))
